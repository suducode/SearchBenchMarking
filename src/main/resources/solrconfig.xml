<?xml version="1.0" encoding="UTF-8" ?>
<!--
      For more details see http://wiki.apache.org/solr/SolrConfigXml
      In all configuration below, a prefix of "solr." for class names
      is an alias that causes solr to search appropriate packages,
      including org.apache.solr.(search|update|request|core|analysis)
      You may also specify a fully qualified Java classname if you
      have your own custom plugins.
  -->

<config>

  <!-- Controls what version of Lucene various components of Solr adhere to. Generally, you want
       to use the latest version to get all bug fixes and improvements. It is highly recommended
       that you fully re-index after changing this setting as it can affect both how text is indexed
       and queried.
    -->
  <luceneMatchVersion>LUCENE_CURRENT</luceneMatchVersion>

  <!-- If you need near real-time indexing and searching, you should use
       solr.NRTCachingDirectoryFactory. It is designed to store some parts
       of the index in memory (small chunks) and thus speed up some near
       real-time operations greatly.
       http://www.packtpub.com/article/apache-solr-configuration

       maxCachedMB default is 48 - The maximum value (MB) of the RAMDirectory.
       maxMergeSizeMB default is 4 - The threshold (MB) for writing a merge segment to a RAMDirectory or file system.
    -->
  <directoryFactory name="DirectoryFactory" class="org.apache.solr.core.NRTCachingDirectoryFactory">
    <double name="maxCachedMB">1024.0</double>
    <double name="maxMergeSizeMB">1024.0</double>
  </directoryFactory>

  <!-- This example enables JMX if and only if an existing MBeanServer.
       For more details see http://wiki.apache.org/solr/SolrJmx
    -->
  <jmx/>

  <!-- Disable dynamic schema REST APIs: requires the use of a schema.xml file -->
  <schemaFactory class="ClassicIndexSchemaFactory"/>

  <indexConfig>
    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
    <writeLockTimeout>1000</writeLockTimeout>

    <!-- The maximum number of simultaneous threads that may be
         indexing documents at once in IndexWriter; if more than this
         many threads arrive they will wait for others to finish.
         Default in Solr/Lucene is 8. -->
    <maxIndexingThreads>16</maxIndexingThreads>

    <!-- Expert: Enabling compound file will use less files for the index,
         using fewer file descriptors on the expense of performance decrease.
         Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
    <useCompoundFile>false</useCompoundFile>

    <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
         indexing for buffering added documents and deletions before they are
         flushed to the Directory. -->
    <ramBufferSizeMB>1024</ramBufferSizeMB>

    <!-- Merge Factor
         The merge factor controls how many segments will get merged at a time.
         https://wiki.apache.org/solr/SolrPerformanceFactors#mergeFactor
         Low value: smaller number of index files, which speeds up searching.
         But slows down indexing on segment merges.
         Default is 10.
      -->
    <mergeFactor>4</mergeFactor>

    <!-- Expert: Merge Scheduler
         The Merge Scheduler in Lucene controls how merges are
         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.
      -->
    <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>

    <mergedSegmentWarmer class="org.apache.lucene.index.SimpleMergedSegmentWarmer"/>

    <!-- LockFactory

         This option specifies which Lucene LockFactory implementation to use.

         single = SingleInstanceLockFactory - suggested for a
                  read-only index or when there is no possibility of
                  another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking.
                  Do not use when multiple solr webapps in the same
                  JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise
                   'simple' is the default

         More details on the nuances of each LockFactory...
         http://wiki.apache.org/lucene-java/AvailableLockFactories
      -->
    <lockType>native</lockType>

    <!-- If true, IndexReaders will be reopened (often more efficient)
         instead of closed and then opened. Default: true
      -->
    <reopenReaders>true</reopenReaders>

    <!-- Commit Deletion Policy

         Custom deletion policies can be specified here. The class must
         implement org.apache.lucene.index.IndexDeletionPolicy.
         http://lucene.apache.org/java/3_5_0/api/core/org/apache/lucene/index/IndexDeletionPolicy.html

         The default Solr IndexDeletionPolicy implementation supports
         deleting index commit points on number of commits, age of
         commit point and optimized status.
      -->
    <!-- <deletionPolicy class="solr.SolrDeletionPolicy"/> -->

  </indexConfig>

  <!-- Default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.

         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.

         softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near-realtime friendly than a hard commit.

         NOTE: MobileIron setup for near-realtime (NRT) updates.
      -->
    <updateLog>
      <str name="dir">${solr.data.dir:}</str>
      <int name="numRecordsToKeep">20000</int>
      <int name="maxNumLogsToKeep">10</int>
      <int name="numVersionBuckets">65536</int>
    </updateLog>

    <autoCommit>
      <maxTime>300000</maxTime>
      <openSearcher>true</openSearcher>
    </autoCommit>

    <autoSoftCommit>
      <maxTime>5000</maxTime>
    </autoSoftCommit>

    <maxPendingDeletes>20000</maxPendingDeletes>

  </updateHandler>

  <query>
    <!-- Max Boolean Clauses

         Maximum number of clauses in each BooleanQuery, an exception is thrown if exceeded.

         ** WARNING **
         This option actually modifies a global Lucene property that
         will affect all SolrCores.  If multiple solrconfig.xml files
         disagree on this property, the value at any given moment will
         be based on the last SolrCore to be initialized.
      -->
    <maxBooleanClauses>256</maxBooleanClauses>

    <!-- Solr Internal Query Caches

         https://wiki.apache.org/solr/SolrCaching

         There are two implementations of cache available for Solr,
         LRUCache, based on a synchronized LinkedHashMap, and FastLRUCache,
         based on a ConcurrentHashMap. FastLRUCache has faster gets and slower
         puts in single threaded operation and thus is generally faster than
         than LRUCache when the hit ratio of the cache is high (> 75%), and
         may be faster under other scenarios on multi-cpu systems.

         Parameters:
           class         - the SolrCache implementation
           size          - the maximum number of entries in the cache
           initialSize   - the initial capacity (number of entries) of the cache.
           autowarmCount - the number of entries to prepopulate from an old cache.
           cleanupThread - FastLRUCache only. cleanup run in a dedicated separate thread.

         Filter Cache

         Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.

         Query Result Cache

         Caches results of searches - ordered lists of document ids
         (DocList) based on a query, a sort, and the range of documents requested.

         Document Cache

         Caches Lucene Document objects (the stored fields for each
         document).  Since Lucene internal document ids are transient,
         this cache will not be autowarmed.

         Field Value Cache

         Cache used to hold field values that are quickly accessible
         by document id.  The fieldValueCache is created by default
         even if not configured here.
      -->

    <filterCache class="solr.FastLRUCache" size="10240" initialSize="10240" cleanupThread="true" autowarmCount="0"/>
    <queryResultCache class="solr.FastLRUCache" size="10240" initialSize="10240" cleanupThread="true" autowarmCount="0"/>
    <documentCache class="solr.FastLRUCache" size="10240" initialSize="10240" cleanupThread="true" autowarmCount="0"/>
    <fieldValueCache class="solr.FastLRUCache" size="10240" initialSize="10240" cleanupThread="true" autowarmCount="0"/>

    <!-- Lazy Field Loading

         If true, stored fields that are not requested will be loaded
         lazily.  This can result in a significant speed improvement
         if the usual case is to not load all stored fields,
         especially if the skipped fields are large compressed text
         fields.
      -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <!-- Use Filter For Sorted Query

         A possible optimization that attempts to use a filter to
         satisfy a search.  If the requested sort does not include
         score, then the filterCache will be checked for a filter
         matching the query. If found, the filter will be used as the
         source of document ids, and then the sort will be applied to that.
         For most situations, this will not be useful unless you
         frequently get the same search repeatedly with different sort
         options, and none of them ever use "score"
      -->
    <useFilterForSortedQuery>false</useFilterForSortedQuery>

    <!-- Result Window Size

         An optimization for use with the queryResultCache.  When a search
         is requested, a superset of the requested number of document ids
         are collected.  For example, if a search for a particular query
         requests matching documents 10 through 19, and queryWindowSize is 50,
         then documents 0 through 49 will be collected and cached.  Any further
         requests in that range can be satisfied via the cache.
      -->
    <queryResultWindowSize>200</queryResultWindowSize>

    <!-- Maximum number of documents to cache for any entry in the queryResultCache. -->
    <queryResultMaxDocsCached>1024</queryResultMaxDocsCached>

    <!-- Use Cold Searcher

         If a search request comes in and there is no current
         registered searcher, then immediately register the still
         warming searcher and use it.  If "false" then all requests
         will block until the first searcher is done warming.
      -->
    <useColdSearcher>true</useColdSearcher>

    <!-- Query Related Event Listeners

         Various IndexSearcher related events can trigger Listeners to take actions.

         newSearcher - fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka
         registered).  It can be used to prime certain caches to
         prevent long request times for certain requests.

         firstSearcher - fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from.

         QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence.
      -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
          <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
          <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
          -->
      </arr>
    </listener>
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
          <lst><str name="q">mobileiron</str></lst>
          -->
      </arr>
    </listener>

    <!-- Max Warming Searchers

         Maximum number of searchers that may be warming in the
         background concurrently.  An error is returned if this limit
         is exceeded.

         Recommend values of 1-2 for read-only slaves, higher for
         masters w/o cache warming.
      -->
    <maxWarmingSearchers>16</maxWarmingSearchers>

  </query>

  <!-- Request Dispatcher

       This section contains instructions for how the SolrDispatchFilter
       should behave when processing requests for this SolrCore.

       handleSelect is a legacy option that affects the behavior of requests
       such as /select?qt=XXX

       handleSelect="true" will cause the SolrDispatchFilter to process
       the request and dispatch the query to a handler specified by the
       "qt" param, assuming "/select" isn't already registered.

       handleSelect="false" will cause the SolrDispatchFilter to
       ignore "/select" requests, resulting in a 404 unless a handler
       is explicitly registered with the name "/select"
    -->
  <requestDispatcher handleSelect="true">

    <!--Make sure your system has some authentication before enabling remote streaming!  -->
    <requestParsers enableRemoteStreaming="false" />

    <!-- Set HTTP caching related parameters (for proxy caches and clients).
         The options below instruct Solr not to output any HTTP Caching
         related headers
      -->
    <httpCaching never304="true" />
  </requestDispatcher>

  <!-- Request Handlers

       http://wiki.apache.org/solr/SolrRequestHandler
       Incoming queries will be dispatched to a specific handler by name
       based on the path specified in the request. If a Request Handler is
       Request Handler is declared with startup="lazy", then it will not be
       initialized until the first request that uses it.
    -->

  <!-- SearchHandler

       http://wiki.apache.org/solr/SearchHandler
       For processing Search Queries, the primary Request Handler
       provided with Solr is "SearchHandler" It delegates to a sequent
       of SearchComponents (see below) and supports distributed
       queries across multiple shards

       By default, this will register the following components:
       query, facet, mlt, highlight, debug

       NOTE: For MobileIron "facet.threads" appended.
       Specifying a negative number of threads will create up to Integer.MAX_VALUE threads.
       See http://wiki.apache.org/solr/SimpleFacetParameters#facet.threads
    -->
  <requestHandler name="/select" class="solr.SearchHandler">
    <arr name="components">
      <str>query</str>
      <str>facet</str>
      <str>debug</str>
    </arr>
    <lst name="defaults">
      <str name="echoParams">explicit</str>
    </lst>
    <lst name="appends">
      <int name="facet.threads">24</int>
    </lst>
  </requestHandler>

  <!-- START: For SOLR cloud -->
  <requestHandler name="/replication" class="solr.ReplicationHandler" enable="false" startup="lazy">
    <lst name="master">
      <str name="enable">false</str>
    </lst>
    <lst name="slave">
      <str name="enable">false</str>
    </lst>
  </requestHandler>
  <!-- http://wiki.apache.org/solr/RealTimeGet -->
  <requestHandler name="/get" class="solr.RealTimeGetHandler" startup="lazy">
    <lst name="defaults">
      <str name="omitHeader">true</str>
    </lst>
  </requestHandler>
  <!-- END: For SOLR cloud -->

  <!-- Update Request Handler
       http://wiki.apache.org/solr/UpdateXmlMessages
       The canonical Request Handler for modifying the index through
       commands specified using XML, JSON, CSV, or JAVABIN
    -->
  <requestHandler name="/update" class="solr.UpdateRequestHandler" startup="lazy" />

  <!-- JSON update handler -->
  <requestHandler name="/update/json" class="solr.JsonUpdateRequestHandler" startup="lazy" />

  <!-- Document Analysis Handler
       http://wiki.apache.org/solr/AnalysisRequestHandler
    -->
  <requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" startup="lazy" />

  <!-- Field Analysis Request Handler
       http://lucene.apache.org/solr/4_6_0/solr-core/org/apache/solr/handler/FieldAnalysisRequestHandler.html
   -->
  <requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" startup="lazy" />

  <!-- ping/healthcheck -->
  <requestHandler name="/admin/ping" class="solr.PingRequestHandler" startup="lazy">
    <lst name="invariants">
      <str name="q">solrpingquery</str>
    </lst>
    <lst name="defaults">
      <str name="echoParams">all</str>
    </lst>
    <str name="healthcheckFile">server-enabled.txt</str>
  </requestHandler>

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" startup="lazy">
    <lst name="defaults">
      <!-- for all params (including the default etc) use: 'all' -->
      <str name="echoParams">explicit</str>
      <str name="echoHandler">true</str>
    </lst>
  </requestHandler>

</config>
